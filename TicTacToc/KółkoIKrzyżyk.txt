
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Kółko i Krzyżyk</title>
<style>
    body {
    margin: 0;
    padding: 0;
    font-family: Arial, sans-serif;
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: beige;
}

.board {
    display: grid;
    grid-gap: 5px;
    justify-content: center;
   
    
  
}

.cell {
    width: 100px;
    height: 100px;
    border: 1px solid black;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 2em;
    cursor: pointer;
    background-color: aqua;
}
h1{
    border: 3px solid black;
    font-size: 20px;
}
.Tic_tac_toc{
    display: flex;
    flex-direction: column;
}
</style>
</head>
<body>
    <div class="Tic_tac_toc">
    <h1> Gra w kółko i krzyżyk zacznij od wyboru planszy</h1>
    
<select id="boardSize">
    <option value="3">3x3</option>
    <option value="4">4x4</option>
    <option value="5">5x5</option>
</select>
<button onclick="startGame()">Start</button>
<div class="board" id="board"></div>
</div>

<script>
    let boardSize = 3;
let currentPlayer = 'X';
let cells = [];

function startGame() {
    boardSize = parseInt(document.getElementById('boardSize').value);
    cells = Array.from({ length: boardSize ** 2 }, () => '');
    renderBoard();
}

function renderBoard() {
    const board = document.getElementById('board');
    board.innerHTML = '';
    board.style.gridTemplateColumns = `repeat(${boardSize}, 100px)`;
    board.style.gridTemplateRows = `repeat(${boardSize}, 100px)`;

    cells.forEach((value, index) => {
        const cell = document.createElement('div');
        cell.classList.add('cell');
        cell.textContent = value;
        cell.addEventListener('click', () => handleMove(index));
        board.appendChild(cell);
    });
}

function handleMove(index) {
    if (cells[index] === '') {
        cells[index] = currentPlayer;
        renderBoard();
        if (checkWinner()) {
            alert('Hurra!!!! Gracz: '+currentPlayer + ' wygrywa! ');
            resetGame();
        } else if (cells.every(cell => cell !== '')) {
            alert('Spróbuj jeszcze raz -Remis!');
            resetGame();
        } else {
            currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
        }
    }
}

function checkWinner() {
    const winningCombos = [];
    
    for (let i = 0; i < boardSize; i++) {
        winningCombos.push(Array.from({ length: boardSize }, (_, j) => i * boardSize + j));
    }
    
    for (let i = 0; i < boardSize; i++) {
        winningCombos.push(Array.from({ length: boardSize }, (_, j) => i + j * boardSize));
    }
   
    winningCombos.push(Array.from({ length: boardSize }, (_, i) => i * (boardSize + 1)));
    winningCombos.push(Array.from({ length: boardSize }, (_, i) => (i + 1) * (boardSize - 1)));

    return winningCombos.some(combo => {
        return combo.every(index => cells[index] === currentPlayer);
    });
}

function resetGame() {
    currentPlayer = 'X';
    cells = Array.from({ length: boardSize ** 2 }, () => '');
    renderBoard();
}
</script>
</body>
</html>